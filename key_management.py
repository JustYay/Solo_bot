import asyncio
import re
import uuid
from datetime import datetime, timedelta

import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message)

from auth import link, login_with_credentials
from bot import bot, dp
from client import add_client
from config import (ADMIN_CHAT_ID, ADMIN_PASSWORD, ADMIN_USERNAME, API_TOKEN,
                    DATABASE_URL)
from database import (add_connection, get_balance, has_active_key, store_key,
                      update_balance)
from handlers.profile import process_callback_view_profile
from handlers.start import start_command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


router = Router()

# –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞
def sanitize_key_name(key_name: str) -> str:
    return re.sub(r'[^a-z0-9@._-]', '', key_name.lower())

class Form(StatesGroup):
    waiting_for_key_name = State()
    viewing_profile = State()

@dp.callback_query(F.data == 'create_key')
async def process_callback_create_key(callback_query: CallbackQuery, state: FSMContext):
    tg_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ trial –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        existing_connection = await conn.fetchrow('SELECT trial FROM connections WHERE tg_id = $1', tg_id)
    finally:
        await conn.close()

    trial_status = existing_connection['trial'] if existing_connection else 0

    if trial_status == 1:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å —É–∂–µ –±—ã–ª –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –ù–æ–≤—ã–π —Å—Ç–æ–∏—Ç 100 —Ä—É–±–ª–µ–π –∏ —Å—Ä–∞–∑—É –Ω–∞ –º–µ—Å—è—Ü. \n\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text='–î–∞, —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á', callback_data='confirm_create_new_key')],
                [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='cancel_create_key')]
            ])
        )
        await state.update_data(creating_new_key=True)
    else:
        await callback_query.message.edit_text("–í–∞–º –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞:")
        await state.set_state(Form.waiting_for_key_name)

    await callback_query.answer()

@dp.callback_query(F.data == 'confirm_create_new_key')
async def confirm_create_new_key(callback_query: CallbackQuery, state: FSMContext):
    tg_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    balance = await get_balance(tg_id)
    if balance < 100:
        replenish_button = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[replenish_button]])
        await callback_query.message.edit_text(
            "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", 
            reply_markup=keyboard
        )
        await state.clear()
        return

    await callback_query.message.edit_text("üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:")
    await state.set_state(Form.waiting_for_key_name)
    await state.update_data(creating_new_key=True)

    await callback_query.answer()

@dp.callback_query(F.data == 'cancel_create_key')
async def cancel_create_key(callback_query: CallbackQuery, state: FSMContext):
    await process_callback_view_profile(callback_query, state)
    await callback_query.answer()

def start_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = KeyboardButton(text='/start')
    keyboard.add(start_button)
    return keyboard

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_text(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if message.text == "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        callback_query = types.CallbackQuery(
            id="1",
            from_user=message.from_user,
            chat_instance='',
            data='view_profile',
            message=message
        )
        await process_callback_view_profile(callback_query, state)
        return

    if message.text in ["/start", "–ú–µ–Ω—é"]:
        await start_command(message)
        return

    if message.text.lower() == "–∫–∞—Ä–∏–Ω–∞ –∫—Ä–∏–Ω–∂":
        await message.answer("–≠—Ç–æ –∏ —Ç–∞–∫ –≤—Å–µ–º –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –ª—É—á—à–µ –∑–∞–π–º–µ–º—Å—è –¥–æ—Å—Ç—É–ø–æ–º –∫ –≤–ø–Ω. –ö—Å—Ç–∞—Ç–∏, —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!")
        return    

    if current_state == Form.waiting_for_key_name.state:
        await handle_key_name_input(message, state)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=start_keyboard())

async def handle_key_name_input(message: Message, state: FSMContext):
    tg_id = message.from_user.id

    key_name = sanitize_key_name(message.text)

    if not key_name:
        await message.bot.send_message(tg_id, "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–æ–≤–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.")
        return

    data = await state.get_data()
    creating_new_key = data.get('creating_new_key', False)

    session = login_with_credentials(ADMIN_USERNAME, ADMIN_PASSWORD)
    client_id = str(uuid.uuid4())
    email = key_name.lower()
    current_time = datetime.utcnow()
    expiry_time = None

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        existing_connection = await conn.fetchrow('SELECT trial FROM connections WHERE tg_id = $1', tg_id)
    finally:
        await conn.close()

    trial_status = existing_connection['trial'] if existing_connection else 0

    if trial_status == 0:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–Ω—ã–π –∫–ª—é—á –Ω–∞ 1 –¥–µ–Ω—å
        expiry_time = int((current_time + timedelta(days=1)).timestamp() * 1000)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        balance = await get_balance(tg_id)
        if balance < 100:
            replenish_button = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[replenish_button]])
            await message.bot.send_message(tg_id, "‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞.", reply_markup=keyboard)
            await state.clear()
            return

        await update_balance(tg_id, -100)
        expiry_time = int((current_time + timedelta(days=30)).timestamp() * 1000)

    try:
        add_client(session, client_id, email, tg_id, limit_ip=1, total_gb=0, expiry_time=expiry_time, enable=True, flow="xtls-rprx-vision")
        connection_link = link(session, client_id, email)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            existing_connection = await conn.fetchrow('SELECT * FROM connections WHERE tg_id = $1', tg_id)

            if existing_connection:
                await conn.execute('UPDATE connections SET trial = 1 WHERE tg_id = $1', tg_id)
            else:
                await add_connection(tg_id, 0, 1)

        finally:
            await conn.close()

        await store_key(tg_id, client_id, email, expiry_time, connection_link)

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', callback_data='instructions')],
            [InlineKeyboardButton(text='üîô –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')]
        ])

        key_message = (
            "‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:\n"
            f"<pre>{connection_link}</pre>"
        )
        await message.bot.send_message(tg_id, key_message, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        await message.bot.send_message(tg_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: {e}")

    await state.clear()



@dp.callback_query(F.data == 'instructions')
async def handle_instructions(callback_query: CallbackQuery):
    instructions_message = (
        "*üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞:*\n\n"
        "1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:\n"
        "   - –î–ª—è Android: [V2Ray](https://play.google.com/store/apps/details?id=com.v2ray.ang&hl=ru&pli=1)\n"
        "   - –î–ª—è iPhone: [Streisand](https://apps.apple.com/ru/app/streisand/id6450534064)\n\n"
        "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞–Ω–µ–µ.\n"
        "3. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ —Å–≤–µ—Ä—Ö—É —Å–ø—Ä–∞–≤–∞.\n"
        "4. –í—ã–±–µ—Ä–∏—Ç–µ '–í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞.\n\n"
        "üí¨ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—â–∞—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    )

    back_button = InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back_to_main')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

    await callback_query.message.edit_text(instructions_message, parse_mode='Markdown', reply_markup=keyboard)
    await callback_query.answer()

@dp.callback_query(F.data == 'back_to_main')
async def handle_back_to_main(callback_query: CallbackQuery, state: FSMContext):
    await process_callback_view_profile(callback_query, state)
    await callback_query.answer()

async def renew_expired_keys():
    while True:
        current_time = datetime.utcnow()
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            active_keys = await conn.fetch('SELECT tg_id FROM connections WHERE trial > 0')

        finally:
            await conn.close()

        for record in active_keys:
            tg_id = record['tg_id']
            balance = await get_balance(tg_id)
            if balance >= 100:
                new_expiry_time = int((current_time + timedelta(days=30)).timestamp() * 1000)

                conn = await asyncpg.connect(DATABASE_URL)
                try:
                    await conn.execute('UPDATE keys SET expiry_time = $1 WHERE tg_id = $2', new_expiry_time, tg_id)
                    await update_balance(tg_id, -100)
                finally:
                    await conn.close()

                print(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–µ—Å—è—Ü –∏ —Å–ø–∏—Å–∞–Ω–æ 100 —Ä—É–±–ª–µ–π.")
            else:
                print(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
                replenish_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='replenish_balance')]
                ])
                await bot.send_message(tg_id, "–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.", reply_markup=replenish_keyboard)

        await asyncio.sleep(3600)


async def notify_expiring_keys():
    while True:
        current_time = datetime.utcnow()
        threshold_time = int((current_time + timedelta(hours=10)).timestamp() * 1000)

        conn = await asyncpg.connect(DATABASE_URL)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –∫–ª—é—á–∞–º–∏
            expiring_keys = await conn.fetch('SELECT tg_id, expiry_time FROM keys WHERE expiry_time <= $1', threshold_time)

            for record in expiring_keys:
                tg_id = record['tg_id']
                expiry_time = record['expiry_time']

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await bot.send_message(tg_id, f"üîî –í–∞—à –∫–ª—é—á –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 10 —á–∞—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.")
        
        finally:
            await conn.close()

        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å