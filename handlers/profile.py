from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup

from bot import bot 
from database import get_balance, get_key_count, get_referral_stats, get_keys

class ReplenishBalanceState(StatesGroup):
    choosing_transfer_method = State()
    waiting_for_admin_confirmation = State()

router = Router()
async def process_callback_view_profile(callback_query: types.CallbackQuery, state: FSMContext):
    tg_id = callback_query.from_user.id
    username = callback_query.from_user.full_name  

    try:
        key_count = await get_key_count(tg_id)
        balance = await get_balance(tg_id)
        if balance is None:
            balance = 0 

        profile_message = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å: {username}</b>\n\n"
            f"üîπ <b>ID:</b> {tg_id}\n"
            f"üîπ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} RUB\n"
            f"üîπ <b>–ö-–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:</b> {key_count}\n\n"
        )

        profile_message += (
            f"<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª</b> <a href='https://t.me/solonet_vpn'>–∑–¥–µ—Å—å</a>\n"
        )
        
        if key_count == 0:
            profile_message += "\n<i>–ù–∞–∂–º–∏—Ç–µ ‚ûï–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–Ω–∏–∑—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ VPN</i>"
        
        button_create_key = InlineKeyboardButton(text='‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='create_key')
        button_view_keys = InlineKeyboardButton(text='üì± –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', callback_data='view_keys')
        button_replenish_balance = InlineKeyboardButton(text='üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='replenish_balance')
        button_invite = InlineKeyboardButton(text='üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å', callback_data='invite')
        button_instructions = InlineKeyboardButton(text='üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
        button_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_menu')
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [button_create_key, button_view_keys],  # –í –æ–¥–∏–Ω —Ä—è–¥ "‚ûï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" –∏ "üì± –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
            [button_replenish_balance],              # –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
            [button_invite, button_instructions],    # –í –æ–¥–∏–Ω —Ä—è–¥ "üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å" –∏ "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"
            [button_back]                            # –û—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        ])

    except Exception as e:
        profile_message = f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}"
        keyboard = None
    
    await callback_query.message.delete()
    
    await bot.send_message(
        chat_id=tg_id, 
        text=profile_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'invite')
async def invite_handler(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    referral_link = f"https://t.me/SoloNetVPN_bot?start=referral_{tg_id}"
    
    referral_stats = await get_referral_stats(tg_id)
    
    invite_message = (
        f"üë• <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n<pre>{referral_link}</pre>\n"
        f"<i>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ 25% —Å –µ–≥–æ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è!</i>\n\n"
        f"üîπ <b>–í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ:</b> {referral_stats['total_referrals']}\n"
        f"üîπ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {referral_stats['active_referrals']}"
    )
    
    button_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='view_profile')
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[button_back]])

    await callback_query.message.delete()

    await bot.send_message(
        chat_id=tg_id,
        text=invite_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )

    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'view_profile')
async def view_profile_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await process_callback_view_profile(callback_query, state)