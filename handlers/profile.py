from aiogram import types, Router
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from database import get_balance, get_key_count

router = Router()

class ReplenishBalanceState(StatesGroup):
    choosing_transfer_method = State()
    waiting_for_admin_confirmation = State()

async def process_callback_view_profile(callback_query: types.CallbackQuery, state: FSMContext):
    tg_id = callback_query.from_user.id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
        key_count = await get_key_count(tg_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await get_balance(tg_id)
        if balance is None:
            balance = 0  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 0, –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        
        profile_message = (
            f"<b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            f"üîπ <b>ID:</b> {tg_id}\n"
            f"üîπ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π:</b> {key_count}\n"
            f"üîπ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} RUB\n"
            f"üîπ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}\n"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ
        button_create_key = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', callback_data='create_key')
        button_view_keys = InlineKeyboardButton(text='–ú–æ–∏ –∫–ª—é—á–∏', callback_data='view_keys')
        button_replenish_balance = InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='replenish_balance')
        button_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_menu')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [button_create_key],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á"
            [button_view_keys],
            [button_replenish_balance],
            [button_back]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        ])

    except Exception as e:
        profile_message = f"‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è: {e}"
        keyboard = None
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback_query.message.edit_text(
        text=profile_message,
        parse_mode='HTML',
        reply_markup=keyboard
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'view_profile')
async def view_profile_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await process_callback_view_profile(callback_query, state)
