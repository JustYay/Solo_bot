from datetime import datetime, timedelta

import asyncpg
from aiogram import Router, types

from auth import login_with_credentials
from bot import bot
from client import delete_client, extend_client_key
from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL
from database import get_balance, update_balance

router = Router()

from datetime import datetime, timedelta
import asyncpg
from aiogram import Router, types
from auth import login_with_credentials
from bot import bot
from client import delete_client, extend_client_key
from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL
from database import get_balance, update_balance

router = Router()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–µ–π
@router.callback_query(lambda c: c.data == 'view_keys')
async def process_callback_view_keys(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            records = await conn.fetch('''
                SELECT email, client_id FROM keys WHERE tg_id = $1
            ''', tg_id)

            if records:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
                buttons = []
                for record in records:
                    key_name = record['email']
                    client_id = record['client_id']
                    # –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –Ω–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é —á–µ—Ä—Ç—É –≤ callback_data
                    button = types.InlineKeyboardButton(text=f"üîë {key_name}", callback_data=f'view_key|{key_name}|{client_id}')
                    buttons.append([button])

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
                response_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>"

                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard, parse_mode="HTML")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á" –∏ "–ù–∞–∑–∞–¥"
                response_message = "<b>–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π.</b>"

                # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á"
                create_key_button = types.InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', callback_data='create_key')
                back_button = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='view_profile')  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[create_key_button], [back_button]])

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('view_key|'))
async def process_callback_view_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç–µ
    key_name, client_id = callback_query.data.split('|')[1], callback_query.data.split('|')[2]

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('''
                SELECT k.key, k.expiry_time 
                FROM keys k
                WHERE k.tg_id = $1 AND k.email = $2
            ''', tg_id, key_name)

            if record:
                key = record['key']
                expiry_time = record['expiry_time']
                expiry_date = datetime.utcfromtimestamp(expiry_time / 1000)
                current_date = datetime.utcnow()
                time_left = expiry_date - current_date

                if time_left.total_seconds() <= 0:
                    days_left_message = "<b>–ö–ª—é—á –∏—Å—Ç–µ–∫.</b>"
                elif time_left.days > 0:
                    days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{time_left.days}</b>"
                else:
                    hours_left = time_left.seconds // 3600
                    days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: <b>{hours_left}</b>"

                response_message = (f"üîë <b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{key}</pre>\n"
                                    f"üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {expiry_date.strftime('%Y-%m-%d %H:%M:%S')}\n"
                                    f"{days_left_message}")

                # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –∏ —É–¥–∞–ª–µ–Ω–∏—è
                renew_button = types.InlineKeyboardButton(text='‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á', callback_data=f'renew_key|{client_id}')
                instructions_button = types.InlineKeyboardButton(text='üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
                delete_button = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á', callback_data=f'delete_key|{client_id}')
                back_button = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[renew_button], [instructions_button], [delete_button], [back_button]])

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")
            else:
                await bot.edit_message_text("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>", chat_id=tg_id, message_id=callback_query.message.message_id, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ: {e}")

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
@router.callback_query(lambda c: c.data.startswith('delete_key|'))
async def process_callback_delete_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞

    confirmation_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'confirm_delete|{client_id}')],
        [types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data='view_keys')]
    ])

    await bot.edit_message_text("<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á?</b>", chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=confirmation_keyboard, parse_mode="HTML")
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith('renew_key|'))
async def process_callback_renew_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, expiry_time FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                expiry_time = record['expiry_time']
                current_time = datetime.utcnow().timestamp() * 1000  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–π –∫–ª—é—á
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text='üìÖ 1 –º–µ—Å—è—Ü (100 —Ä—É–±.)', callback_data=f'renew_plan|1|{client_id}')],
                    [types.InlineKeyboardButton(text='üìÖ 3 –º–µ—Å—è—Ü–∞ (250 —Ä—É–±.)', callback_data=f'renew_plan|3|{client_id}')],
                    [types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='view_profile')]
                ])

                balance = await get_balance(tg_id)
                response_message = (f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>\n"
                                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} —Ä—É–±.\n"
                                    f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞:</b> {datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}")

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞:</b> {e}", chat_id=tg_id, message_id=callback_query.message.message_id, parse_mode="HTML")

    await callback_query.answer()

async def handle_error(tg_id, callback_query, message):
    await bot.edit_message_text(message, chat_id=tg_id, message_id=callback_query.message.message_id)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith('renew_key|'))
async def process_callback_renew_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, expiry_time FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                expiry_time = record['expiry_time']
                current_time = datetime.utcnow().timestamp() * 1000  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

                # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏—Å—Ç–µ–∫—à–∏–π –∫–ª—é—á
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 1 –º–µ—Å—è—Ü (100 —Ä—É–±.)', callback_data=f'renew_plan|1|{client_id}')],
                    [types.InlineKeyboardButton(text='–ü—Ä–æ–¥–ª–∏—Ç—å –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (250 —Ä—É–±.)', callback_data=f'renew_plan|3|{client_id}')],
                    [types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_profile')]
                ])

                balance = await get_balance(tg_id)
                response_message = (f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n"
                                    f"–ë–∞–ª–∞–Ω—Å: <b>{balance} —Ä—É–±.</b>\n"
                                    f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞: <b>{datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}</b>")

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞: {e}", chat_id=tg_id, message_id=callback_query.message.message_id)

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('confirm_delete|'))
async def process_callback_confirm_delete(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                
                session = login_with_credentials(ADMIN_USERNAME, ADMIN_PASSWORD)
                success = delete_client(session, client_id)

                if success:
                    await conn.execute('DELETE FROM keys WHERE client_id = $1', client_id)
                    response_message = "–ö–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
                else:
                    response_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API."

            else:
                response_message = "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω."

            back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_keys')
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

            await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard)

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}", chat_id=tg_id, message_id=callback_query.message.message_id)

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith('renew_plan|'))
async def process_callback_renew_plan(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    plan, client_id = callback_query.data.split('|')[1], callback_query.data.split('|')[2]  # '1' –∏–ª–∏ '3' –∏ client_id
    days_to_extend = 30 * int(plan)

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, expiry_time FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                expiry_time = record['expiry_time']
                current_time = datetime.utcnow().timestamp() * 1000  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

                if expiry_time <= current_time:
                    # –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –∏—Å—Ç–µ–∫, –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω
                    await bot.edit_message_text("–í–∞—à –∫–ª—é—á —É–∂–µ –∏—Å—Ç–µ–∫ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–¥–ª–µ–Ω.", chat_id=tg_id, message_id=callback_query.message.message_id)
                    return

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                new_expiry_time = int(expiry_time + timedelta(days=days_to_extend).total_seconds() * 1000)
                cost = 100 if plan == '1' else 250

                balance = await get_balance(tg_id)
                if balance < cost:
                    replenish_button = types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='replenish_balance')
                    back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_profile')
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[replenish_button], [back_button]])

                    await bot.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞.", chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard)
                    return

                # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ API
                session = login_with_credentials(ADMIN_USERNAME, ADMIN_PASSWORD)
                success = extend_client_key(session, tg_id, client_id, email, new_expiry_time)

                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    await update_balance(tg_id, -cost)
                    await conn.execute('UPDATE keys SET expiry_time = $1 WHERE client_id = $2', new_expiry_time, client_id)
                    response_message = f"–í–∞—à –∫–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {days_to_extend // 30} –º–µ—Å—è—Ü(-–∞)."
                    back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_profile')
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])
                    await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard)
                else:
                    await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.", chat_id=tg_id, message_id=callback_query.message.message_id)
            else:
                await bot.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=tg_id, message_id=callback_query.message.message_id)

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}", chat_id=tg_id, message_id=callback_query.message.message_id)

    await callback_query.answer()

async def handle_error(tg_id, callback_query, message):
    await bot.edit_message_text(message, chat_id=tg_id, message_id=callback_query.message.message_id)