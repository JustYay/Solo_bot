from datetime import datetime, timedelta

import asyncpg
from aiogram import Router, types

from auth import link, login_with_credentials
from bot import bot
from client import add_client, delete_client, extend_client_key
from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL, SERVERS
from database import get_balance, update_balance

router = Router()

@router.callback_query(lambda c: c.data == 'view_keys')
async def process_callback_view_keys(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            records = await conn.fetch('''
                SELECT email, client_id FROM keys WHERE tg_id = $1
            ''', tg_id)

            if records:
                buttons = []
                for record in records:
                    key_name = record['email']
                    client_id = record['client_id']
                    button = types.InlineKeyboardButton(text=f"üîë {key_name}", callback_data=f'view_key|{key_name}|{client_id}')
                    buttons.append([button])

                inline_keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
                response_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:</b>"

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=inline_keyboard, parse_mode="HTML")
            else:
                response_message = "<b>–£ –≤–∞—Å –Ω–µ—Ç –∫–ª—é—á–µ–π.</b>"
                create_key_button = types.InlineKeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á', callback_data='create_key')
                back_button = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='view_profile')  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
                
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[create_key_button], [back_button]])

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}")

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('view_key|'))
async def process_callback_view_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    key_name, client_id = callback_query.data.split('|')[1], callback_query.data.split('|')[2]

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('''
                SELECT k.key, k.expiry_time, k.server_id 
                FROM keys k
                WHERE k.tg_id = $1 AND k.email = $2
            ''', tg_id, key_name)

            if record:
                key = record['key']
                expiry_time = record['expiry_time']
                server_id = record['server_id']

                server_name = SERVERS.get(server_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–µ—Ä–≤–µ—Ä')

                expiry_date = datetime.utcfromtimestamp(expiry_time / 1000)
                current_date = datetime.utcnow()
                time_left = expiry_date - current_date

                if time_left.total_seconds() <= 0:
                    days_left_message = "<b>–ö–ª—é—á –∏—Å—Ç–µ–∫.</b>"
                elif time_left.days > 0:
                    days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{time_left.days}</b>"
                else:
                    hours_left = time_left.seconds // 3600
                    days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: <b>{hours_left}</b>"

                response_message = (f"üîë <b>–í–∞—à –∫–ª—é—á:</b>\n<pre>{key}</pre>\n"
                                    f"üìÖ <b>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è:</b> {expiry_date.strftime('%Y-%m-%d %H:%M:%S')}\n"
                                    f"{days_left_message}\n"
                                    f"üåç <b>–°–µ—Ä–≤–µ—Ä:</b> {server_name}")

                renew_button = types.InlineKeyboardButton(text='‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á', callback_data=f'renew_key|{client_id}')
                instructions_button = types.InlineKeyboardButton(text='üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏', callback_data='instructions')
                delete_button = types.InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á', callback_data=f'delete_key|{client_id}')
                change_location_button = types.InlineKeyboardButton(text='üåç –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é', callback_data=f'change_location|{client_id}')
                back_button = types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')

                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[
                        [instructions_button],  
                        [renew_button, delete_button], 
                        [change_location_button],  
                        [back_button] 
                    ]
                )

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")
            else:
                await bot.edit_message_text("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>", chat_id=tg_id, message_id=callback_query.message.message_id, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ: {e}")

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('delete_key|'))
async def process_callback_delete_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1] 

    confirmation_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text='‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data=f'confirm_delete|{client_id}')],
        [types.InlineKeyboardButton(text='‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å', callback_data='view_keys')]
    ])

    await bot.edit_message_text("<b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á?</b>", chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=confirmation_keyboard, parse_mode="HTML")
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('renew_key|'))
async def process_callback_renew_key(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1] 

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, expiry_time FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                expiry_time = record['expiry_time']
                current_time = datetime.utcnow().timestamp() * 1000  
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text='üìÖ 1 –º–µ—Å—è—Ü (100 —Ä—É–±.)', callback_data=f'renew_plan|1|{client_id}')],
                    [types.InlineKeyboardButton(text='üìÖ 3 –º–µ—Å—è—Ü–∞ (285 —Ä—É–±.)', callback_data=f'renew_plan|3|{client_id}')],
                    [types.InlineKeyboardButton(text='üìÖ 6 –º–µ—Å—è—Ü–µ–≤ (540 —Ä—É–±.)', callback_data=f'renew_plan|6|{client_id}')],
                    [types.InlineKeyboardButton(text='üìÖ 12 –º–µ—Å—è—Ü–µ–≤ (1000 —Ä—É–±.)', callback_data=f'renew_plan|12|{client_id}')],
                    [types.InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='view_profile')]
                ])

                balance = await get_balance(tg_id)
                response_message = (f"<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø—Ä–æ–¥–ª–µ–Ω–∏—è:</b>\n"
                                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {balance} —Ä—É–±.\n"
                                    f"üìÖ <b>–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞:</b> {datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}")

                await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞–Ω–∞:</b> {e}", chat_id=tg_id, message_id=callback_query.message.message_id, parse_mode="HTML")

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('confirm_delete|'))
async def process_callback_confirm_delete(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1]

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, server_id FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                server_id = record['server_id']
                session = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
                success = await delete_client(session, server_id, client_id)

                if success:
                    await conn.execute('DELETE FROM keys WHERE client_id = $1', client_id)
                    response_message = "–ö–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
                else:
                    response_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ API."

            else:
                response_message = "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω."

            back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_keys')
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

            await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard)

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}", chat_id=tg_id, message_id=callback_query.message.message_id)

    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('renew_plan|'))
async def process_callback_renew_plan(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    plan, client_id = callback_query.data.split('|')[1], callback_query.data.split('|')[2] 
    days_to_extend = 30 * int(plan)  

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, expiry_time, server_id FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                expiry_time = record['expiry_time']
                server_id = record['server_id']  
                current_time = datetime.utcnow().timestamp() * 1000 

                if expiry_time <= current_time:
                    new_expiry_time = int(current_time + timedelta(days=days_to_extend).total_seconds() * 1000)
                else:
                    new_expiry_time = int(expiry_time + timedelta(days=days_to_extend).total_seconds() * 1000)

                if plan == '1':
                    cost = 100
                elif plan == '3':
                    cost = 285
                elif plan == '6':
                    cost = 540  
                elif plan == '12':
                    cost = 1000  

                balance = await get_balance(tg_id)
                if balance < cost:
                    replenish_button = types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='replenish_balance')
                    back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_profile')
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[replenish_button], [back_button]])

                    await bot.edit_message_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞.", chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard)
                    return

                session = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
                success = await extend_client_key(session, server_id, tg_id, client_id, email, new_expiry_time)

                if success:
                    await update_balance(tg_id, -cost)
                    await conn.execute('UPDATE keys SET expiry_time = $1 WHERE client_id = $2', new_expiry_time, client_id)
                    response_message = f"–í–∞—à –∫–ª—é—á –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ {days_to_extend // 30} –º–µ—Å—è—Ü(-–∞)."
                    back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_profile')
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])
                    await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard)
                else:
                    await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞.", chat_id=tg_id, message_id=callback_query.message.message_id)
            else:
                await bot.edit_message_text("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.", chat_id=tg_id, message_id=callback_query.message.message_id)

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}", chat_id=tg_id, message_id=callback_query.message.message_id)

    await callback_query.answer()

async def handle_error(tg_id, callback_query, message):
    await bot.edit_message_text(message, chat_id=tg_id, message_id=callback_query.message.message_id)

@router.callback_query(lambda c: c.data.startswith('change_location|'))
async def process_callback_change_location(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    client_id = callback_query.data.split('|')[1] 
    server_buttons = []
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        for server_id, server in SERVERS.items():
            count = await conn.fetchval('SELECT COUNT(*) FROM keys WHERE server_id = $1', server_id)
            percent_full = (count / 100) * 100  
            server_name = f"{server['name']} ({percent_full:.1f}%)"
            server_buttons.append([types.InlineKeyboardButton(text=server_name, callback_data=f'select_server&{server_id}&{client_id}')])
    finally:
        await conn.close()

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=server_buttons)
    
    response_message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞:</b>"
    await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith('select_server&'))
async def process_callback_select_server(callback_query: types.CallbackQuery):
    tg_id = callback_query.from_user.id
    server_id, client_id = callback_query.data.split('&')[1], callback_query.data.split('&')[2]

    try:
        conn = await asyncpg.connect(DATABASE_URL)
        try:
            record = await conn.fetchrow('SELECT email, expiry_time, server_id FROM keys WHERE client_id = $1', client_id)

            if record:
                email = record['email']
                expiry_time = record['expiry_time']
                current_server_id = record['server_id']

                # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                session_new = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
                new_expiry_time = int(datetime.utcnow().timestamp() * 1000) + (expiry_time - datetime.utcnow().timestamp() * 1000)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                new_client_data = await add_client(session_new, server_id, client_id, email, tg_id, limit_ip=1, total_gb=0, expiry_time=new_expiry_time, enable=True, flow="xtls-rprx-vision")

                if new_client_data:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
                    new_key = await link(session_new, server_id, client_id, email)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
                    await conn.execute('UPDATE keys SET server_id = $1, key = $2 WHERE client_id = $3',
                                       server_id, new_key, client_id)

                    # –õ–æ–≥–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
                    try:
                        session_old = await login_with_credentials(current_server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
                        success_delete = await delete_client(session_old, current_server_id, client_id)

                        if success_delete:
                            response_message = (f"–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä.\n\n"
                                                f"<b>–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Ω–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É:</b>\n"
                                                f"<pre>{new_key}</pre>")
                        else:
                            response_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞. –ö–ª–∏–µ–Ω—Ç –Ω–µ —É–¥–∞–ª–µ–Ω."
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —Å —Å–µ—Ä–≤–µ—Ä–∞ {current_server_id}. –û—Ç–≤–µ—Ç API: {success_delete}")
                    except Exception as e:
                        response_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: {e}"
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ {current_server_id}: {e}")
                else:
                    response_message = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ."
            else:
                response_message = "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω."

            back_button = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='view_keys')
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

            await bot.edit_message_text(response_message, chat_id=tg_id, message_id=callback_query.message.message_id, reply_markup=keyboard, parse_mode='HTML')

        finally:
            await conn.close()

    except Exception as e:
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ª–æ–∫–∞—Ü–∏–∏: {e}", chat_id=tg_id, message_id=callback_query.message.message_id, parse_mode='HTML')

    await callback_query.answer()
