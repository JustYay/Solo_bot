import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Router, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncpg
from py3xui import AsyncApi

from client import delete_client
from config import ADMIN_PASSWORD, ADMIN_USERNAME, CLUSTERS, DATABASE_URL, TOTAL_GB, TRIAL_TIME
from database import delete_key, get_balance, update_balance, update_key_expiry
from handlers.keys.key_utils import renew_key_in_cluster
from handlers.texts import KEY_EXPIRY_10H, KEY_EXPIRY_24H, KEY_RENEWED, RENEWAL_PLANS
from logger import logger

router = Router()


async def notify_expiring_keys(bot: Bot):
    conn = None
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")

        current_time = datetime.utcnow().timestamp() * 1000
        threshold_time_10h = (datetime.utcnow() + timedelta(hours=10)).timestamp() * 1000
        threshold_time_24h = (datetime.utcnow() + timedelta(days=1)).timestamp() * 1000

        logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

        await notify_inactive_trial_users(bot, conn)
        await asyncio.sleep(1)
        await notify_10h_keys(bot, conn, current_time, threshold_time_10h)
        await asyncio.sleep(1)
        await notify_24h_keys(bot, conn, current_time, threshold_time_24h)
        await asyncio.sleep(1)
        await handle_expired_keys(bot, conn, current_time)
        await asyncio.sleep(1)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    finally:
        if conn:
            await conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")


async def is_bot_blocked(bot: Bot, chat_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, bot.id)
        blocked = member.status == "left"
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if blocked else '–∞–∫—Ç–∏–≤–µ–Ω'}")
        return blocked
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        return False


async def notify_10h_keys(
    bot: Bot,
    conn: asyncpg.Connection,
    current_time: float,
    threshold_time_10h: float,
):
    records = await conn.fetch(
        """
        SELECT tg_id, email, expiry_time, client_id, server_id FROM keys 
        WHERE expiry_time <= $1 AND expiry_time > $2 AND notified = FALSE
    """,
        threshold_time_10h,
        current_time,
    )

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 10 —á–∞—Å–æ–≤.")
    for record in records:
        tg_id = record["tg_id"]
        email = record["email"]
        expiry_time = record["expiry_time"]

        expiry_date = datetime.utcfromtimestamp(expiry_time / 1000)
        current_date = datetime.utcnow()
        time_left = expiry_date - current_date

        if time_left.total_seconds() <= 0:
            days_left_message = "–ö–ª—é—á –∏—Å—Ç–µ–∫"
        elif time_left.days > 0:
            days_left_message = f"{time_left.days}"
        else:
            hours_left = time_left.seconds // 3600
            days_left_message = f"{hours_left}"

        message = KEY_EXPIRY_10H.format(
            email=email,
            expiry_date=expiry_date.strftime("%Y-%m-%d %H:%M:%S"),
            days_left_message=days_left_message,
            price=RENEWAL_PLANS["1"]["price"],
        )

        if not await is_bot_blocked(bot, tg_id):
            try:
                keyboard = types.InlineKeyboardBuilder()
                keyboard.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å VPN", callback_data=f'renew_key|{record["client_id"]}')
                keyboard.button(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="pay")
                keyboard.button(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")
                keyboard.adjust(1)
                keyboard = keyboard.as_markup()
                await bot.send_message(tg_id, message, reply_markup=keyboard)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
                continue

            await conn.execute(
                "UPDATE keys SET notified = TRUE WHERE client_id = $1",
                record["client_id"],
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ notified –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {record['client_id']}.")

        await asyncio.sleep(1)


async def notify_24h_keys(
    bot: Bot,
    conn: asyncpg.Connection,
    current_time: float,
    threshold_time_24h: float,
):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π...")

    records_24h = await conn.fetch(
        """
        SELECT tg_id, email, expiry_time, client_id, server_id FROM keys 
        WHERE expiry_time <= $1 AND expiry_time > $2 AND notified_24h = FALSE
    """,
        threshold_time_24h,
        current_time,
    )

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records_24h)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞.")
    for record in records_24h:
        tg_id = record["tg_id"]
        email = record["email"]
        expiry_time = record["expiry_time"]

        expiry_date = datetime.utcfromtimestamp(expiry_time / 1000)
        current_date = datetime.utcnow()
        time_left = expiry_date - current_date

        if time_left.total_seconds() <= 0:
            days_left_message = "–ö–ª—é—á –∏—Å—Ç–µ–∫"
        elif time_left.days > 0:
            days_left_message = f"{time_left.days}"
        else:
            hours_left = time_left.seconds // 3600
            days_left_message = f"{hours_left}"

        message_24h = KEY_EXPIRY_24H.format(
            email=email,
            days_left_message=days_left_message,
            expiry_date=expiry_date.strftime("%Y-%m-%d %H:%M:%S"),
        )

        if not await is_bot_blocked(bot, tg_id):
            try:
                builder = InlineKeyboardBuilder()
                builder.row(
                    types.InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å VPN",
                        callback_data=f'renew_key|{record["client_id"]}',
                    )
                )
                builder.row(
                    types.InlineKeyboardButton(
                        text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
                        callback_data="pay",
                    )
                )
                builder.row(
                    types.InlineKeyboardButton(
                        text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç",
                        callback_data="profile",
                    )
                )
                keyboard = builder.as_markup()
                await bot.send_message(tg_id, message_24h, reply_markup=keyboard)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")
                continue

            await conn.execute(
                "UPDATE keys SET notified_24h = TRUE WHERE client_id = $1",
                record["client_id"],
            )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ notified_24h –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {record['client_id']}.")

        await asyncio.sleep(1)


async def notify_inactive_trial_users(bot: Bot, conn: asyncpg.Connection):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–≤—à–∏—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥...")

    inactive_trial_users = await conn.fetch(
        """
        SELECT tg_id, username FROM users 
        WHERE tg_id IN (
            SELECT tg_id FROM connections 
            WHERE trial = 0
        ) AND tg_id NOT IN (
            SELECT DISTINCT tg_id FROM keys
        )
        """
    )
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(inactive_trial_users)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    for user in inactive_trial_users:
        tg_id = user['tg_id']
        username = user.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

        try:
            if not await is_bot_blocked(bot, tg_id):
                builder = InlineKeyboardBuilder()
                builder.row(
                    types.InlineKeyboardButton(text="üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="create_key")
                )
                builder.row(types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))
                keyboard = builder.as_markup()

                message = (
                    f"üëã –ü—Ä–∏–≤–µ—Ç, {username}!\n\n"
                    f"üéâ –£ —Ç–µ–±—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–∞ {TRIAL_TIME} –¥–Ω–µ–π!\n"
                    "üïí –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à VPN –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.\n\n"
                    "üí° –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø."
                )

                await bot.send_message(tg_id, message, reply_markup=keyboard)
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏


async def handle_expired_keys(bot: Bot, conn: asyncpg.Connection, current_time: float):
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–ª—é—á–µ–π...")

    adjusted_current_time = current_time + (3 * 60 * 60 * 1000)
    expiring_keys = await conn.fetch(
        """
        SELECT tg_id, client_id, expiry_time, email FROM keys 
        WHERE expiry_time <= $1
        """,
        adjusted_current_time,
    )
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring_keys)} –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∫–ª—é—á–µ–π.")

    async def process_key(record):
        tg_id = record["tg_id"]
        client_id = record["client_id"]
        email = record["email"]
        balance = await get_balance(tg_id)
        expiry_time = record["expiry_time"]
        expiry_date = datetime.utcfromtimestamp(expiry_time / 1000)
        current_date = datetime.utcnow()
        time_left = expiry_date - current_date

        logger.info(
            f"–í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–ª—é—á–∞: {expiry_time} (–¥–∞—Ç–∞: {expiry_date}), –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_date}, –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: {time_left}"
        )

        message_expired = (
            f"‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {email} –∏—Å—Ç–µ–∫–ª–∞ –∏ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞!\n\n"
            "üîç –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "üí° –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ VPN!"
        )
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[[types.InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile")]]
        )

        try:
            if balance >= RENEWAL_PLANS["1"]["price"]:
                await update_balance(tg_id, -RENEWAL_PLANS["1"]["price"])
                new_expiry_time = int((datetime.utcnow() + timedelta(days=30)).timestamp() * 1000)
                await update_key_expiry(client_id, new_expiry_time)

                for cluster_id in CLUSTERS:
                    await renew_key_in_cluster(cluster_id, email, client_id, new_expiry_time, TOTAL_GB)
                    logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}.")

                await conn.execute(
                    """
                    UPDATE keys
                    SET notified = FALSE, notified_24h = FALSE
                    WHERE client_id = $1
                    """,
                    client_id,
                )
                logger.info(f"–§–ª–∞–≥–∏ notified –∏ notified_24 —Å–±—Ä–æ—à–µ–Ω—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å ID {client_id}.")
                try:
                    await bot.send_message(tg_id, text=KEY_RENEWED, reply_markup=keyboard)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {tg_id}.")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {tg_id}: {e}")

            else:
                await safe_send_message(bot, tg_id, message_expired, reply_markup=keyboard)
                await delete_key(client_id)

                for cluster_id, cluster in CLUSTERS.items():
                    for server_id, server in cluster.items():
                        xui = AsyncApi(
                            server["API_URL"],
                            username=ADMIN_USERNAME,
                            password=ADMIN_PASSWORD,
                        )
                        await delete_client(xui, email, client_id)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id}: {e}")

    await asyncio.gather(*[process_key(record) for record in expiring_keys])


async def safe_send_message(bot, tg_id, text, reply_markup=None):
    try:
        await bot.send_message(tg_id, text, reply_markup=reply_markup)
    except Exception as e:
        if "chat not found" in str(e):
            logger.warning(f"–ß–∞—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {tg_id}: {e}")
