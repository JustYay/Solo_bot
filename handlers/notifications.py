from datetime import datetime, timedelta
import asyncpg
from aiogram import Bot, Router
from aiogram.fsm.state import State, StatesGroup
import logging
from config import DATABASE_URL, ADMIN_USERNAME, ADMIN_PASSWORD
from database import get_balance, update_key_expiry, delete_key
from client import extend_client_key, delete_client
from auth import login_with_credentials

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

class NotificationStates(StatesGroup):
    waiting_for_notification_text = State()

async def notify_expiring_keys(bot: Bot):
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ.")
        try:
            current_time = datetime.utcnow().timestamp() * 1000 
            threshold_time_10h = (datetime.utcnow() + timedelta(hours=10)).timestamp() * 1000
            threshold_time_24h = (datetime.utcnow() + timedelta(days=1)).timestamp() * 1000 

            logger.info("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 10 —á–∞—Å–æ–≤ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            records = await conn.fetch('''
                SELECT tg_id, email, expiry_time, client_id, server_id FROM keys 
                WHERE expiry_time <= $1 AND expiry_time > $2 AND notified = FALSE
            ''', threshold_time_10h, current_time)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 10 —á–∞—Å–æ–≤.")
            for record in records:
                tg_id = record['tg_id']
                email = record['email']
                expiry_time = record['expiry_time']
                server_id = record['server_id']

                message = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 10 —á–∞—Å–æ–≤.\n" \
                          f"Email: {email}\n" \
                          f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}"
                
                await bot.send_message(tg_id, message)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")

                await conn.execute('UPDATE keys SET notified = TRUE WHERE client_id = $1', record['client_id'])
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ notified –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {record['client_id']}.")

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
            records_24h = await conn.fetch('''
                SELECT tg_id, email, expiry_time, client_id, server_id FROM keys 
                WHERE expiry_time <= $1 AND expiry_time > $2 AND notified_24h = FALSE
            ''', threshold_time_24h, current_time)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(records_24h)} –∫–ª—é—á–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 24 —á–∞—Å–∞.")
            for record in records_24h:
                tg_id = record['tg_id']
                email = record['email']
                expiry_time = record['expiry_time']
                server_id = record['server_id']

                time_left = (expiry_time / 1000) - datetime.utcnow().timestamp()
                hours_left = max(0, int(time_left // 3600))

                expiry_date = datetime.utcfromtimestamp(expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')
                balance = await get_balance(tg_id)

                message_24h = f"‚è≥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –í–∞—à –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_id} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞.\n" \
                               f"Email: {email}\n" \
                               f"–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: {hours_left} —á–∞—Å–æ–≤\n" \
                               f"–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: {expiry_date}\n" \
                               f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±."

                await bot.send_message(tg_id, message_24h)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}.")

                await conn.execute('UPDATE keys SET notified_24h = TRUE WHERE client_id = $1', record['client_id'])
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ notified_24h –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {record['client_id']}.")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–π –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é
            expiring_keys = await conn.fetch('''
                SELECT tg_id, client_id, expiry_time, server_id FROM keys 
                WHERE expiry_time <= $1
            ''', current_time)

            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(expiring_keys)} –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∫–ª—é—á–µ–π.")
            for record in expiring_keys:
                tg_id = record['tg_id']
                client_id = record['client_id']
                balance = await get_balance(tg_id)
                server_id = record['server_id']

                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {balance}.")

                if balance >= 100:
                    new_expiry_time = int((datetime.utcnow() + timedelta(days=30)).timestamp() * 1000)
                    await update_key_expiry(client_id, new_expiry_time)
                    logger.info(f"–ö–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –ø—Ä–æ–¥–ª–µ–Ω –¥–æ {datetime.utcfromtimestamp(new_expiry_time / 1000).strftime('%Y-%m-%d %H:%M:%S')}.")

                    session = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
                    success = await extend_client_key(session, server_id, tg_id, client_id, email, new_expiry_time)
                    if success:
                        await bot.send_message(tg_id, "–í–∞—à –∫–ª—é—á –±—ã–ª –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–µ—Å—è—Ü.")
                        logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ –º–µ—Å—è—Ü.")
                    else:
                        await bot.send_message(tg_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –Ω–∞ –ø–∞–Ω–µ–ª–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")

                else:
                    await delete_key(client_id)
                    logger.info(f"–ö–ª—é—á –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
                    
                    session = await login_with_credentials(server_id, ADMIN_USERNAME, ADMIN_PASSWORD)
                    success = await delete_client(session, server_id, client_id)
                    if success:
                        await bot.send_message(tg_id, "–í–∞—à –∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞.")
                        logger.info(f"–ö–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} —É–¥–∞–ª–µ–Ω.")
                    else:
                        await bot.send_message(tg_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á —Å –ø–∞–Ω–µ–ª–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")

        finally:
            await conn.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

