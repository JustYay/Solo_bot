from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, LabeledPrice, PreCheckoutQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from bot import bot
from config import RUB_TO_XTR


class DonateState(StatesGroup):
    entering_donate_amount = State()
    waiting_for_donate_confirmation = State()
    waiting_for_donate_payment = State()


router = Router()


@router.callback_query(F.data == "donate")
async def process_donate(callback_query: types.CallbackQuery, state: FSMContext):

    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="ü§ñ –ë–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥", url="https://t.me/PremiumBot"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üí∞ –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞", callback_data="enter_custom_donate_amount"
        )
    )
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_profile"))

    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text="üåü –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!\n\n"
        "–ö–∞–∂–¥—ã–π –¥–æ–Ω–∞—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏ —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å. "
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Ç–µ–º, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç –µ—â–µ –ª—É—á—à–µ. üí°",
        reply_markup=builder.as_markup(),
    )

    await callback_query.answer()


@router.callback_query(F.data == "enter_custom_donate_amount")
async def process_enter_donate_amount(
    callback_query: types.CallbackQuery, state: FSMContext
):
    await callback_query.message.edit_text(f"üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(DonateState.entering_donate_amount)
    await callback_query.answer()


@router.message(DonateState.entering_donate_amount)
async def process_donate_amount_input(message: types.Message, state: FSMContext):

    try:
        await message.delete()
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    if message.text.isdigit():
        amount = int(message.text)
        if amount // RUB_TO_XTR <= 0:
            await message.answer(
                f"–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {RUB_TO_XTR}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:"
            )
            return

        await state.update_data(amount=amount)
        await state.set_state(DonateState.waiting_for_donate_confirmation)

        try:
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="–ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å", pay=True))
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="donate"))

            await message.answer_invoice(
                title=f"–î–æ–Ω–∞—Ç –ø—Ä–æ–µ–∫—Ç—É {amount} —Ä—É–±–ª–µ–π",
                description="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
                prices=[LabeledPrice(label="–î–æ–Ω–∞—Ç", amount=int(amount // RUB_TO_XTR))],
                provider_token="",
                payload=f"{amount}_donate",
                currency="XTR",
                reply_markup=builder.as_markup(),
            )
            await state.set_state(DonateState.waiting_for_donate_payment)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞.")
    else:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –µ—â–µ —Ä–∞–∑:")


@router.pre_checkout_query(DonateState.waiting_for_donate_payment)
async def on_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment, DonateState.waiting_for_donate_payment)
async def on_successful_donate(message: types.Message, state: FSMContext):
    try:
        user_id = int(message.from_user.id)
        amount = float(message.successful_payment.invoice_payload.split("_")[0])
        logger.debug(f"Donate succeeded for user_id: {user_id}, amount: {amount}")

        state_data = await state.get_data()
        previous_message_id = state_data.get("last_message_id")

        if previous_message_id:
            try:
                await bot.delete_message(
                    chat_id=user_id, message_id=previous_message_id
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="view_profile"
            )
        )

        sent_message = await bot.send_message(
            chat_id=user_id,
            text=f"üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–Ω–∞—Ç {amount} —Ä—É–±–ª–µ–π! –í–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ—á–µ–Ω—å –≤–∞–∂–Ω–∞ –¥–ª—è –Ω–∞—Å. üíñ",
            reply_markup=builder.as_markup(),
        )

        await state.update_data(last_message_id=sent_message.message_id)
        await state.clear()

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ user_id –∏–ª–∏ amount: {e}")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–Ω–∞—Ç–∞: {e}")
