import os
from aiogram import Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (BufferedInputFile, CallbackQuery,
                           InlineKeyboardButton, InlineKeyboardMarkup, Message)

from bot import bot
from database import add_referral, check_connection_exists, add_connection
from config import CHANNEL_URL, SUPPORT_CHAT_URL

router = Router()

class FeedbackState(StatesGroup):
    waiting_for_feedback = State()

async def send_welcome_message(chat_id: int):
    welcome_text = (
        "<b>üéâ SoloNet ‚Äî —Ç–≤–æ–π –¥–æ—Å—Ç—É–ø –≤ —Å–≤–æ–±–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç! üåê‚ú®</b>\n\n"
        "<b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        "<blockquote>"
        "üöÄ <b>–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å</b>\n"
        "üîÑ <b>–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å</b>\n"
        "üåç <b>–°–º–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏–π</b>\n"
        "üí¨ <b>–û—Ç–∑—ã–≤—á–∏–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n"
        "üì±üíª <b>–î–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤, –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏ –ø–ª–∞–Ω—à–µ—Ç–æ–≤</b>\n"
        "üí∞ <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: 25% –æ—Ç –ø–æ–∫—É–ø–∫–∏</b>\n"
        "</blockquote>"
        "\nüéÅ <b>1 –¥–µ–Ω—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ</b>\n\n"
        "<i>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è üëá</i>"
    )

    image_path = os.path.join(os.path.dirname(__file__), 'pic.jpg')

    if not os.path.isfile(image_path):
        await bot.send_message(chat_id, "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='view_profile')],
        [InlineKeyboardButton(text='üîí –û VPN', callback_data='about_vpn')],
        [InlineKeyboardButton(text='üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', url=SUPPORT_CHAT_URL)],  
        [InlineKeyboardButton(text='üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', url=CHANNEL_URL)]
    ])

    with open(image_path, 'rb') as image_from_buffer:
        await bot.send_photo(
            chat_id,
            BufferedInputFile(image_from_buffer.read(), filename="pic.jpg"),
            caption=welcome_text,
            parse_mode='HTML',
            reply_markup=inline_keyboard 
        )

@router.message(Command('start'))
async def start_command(message: Message):
    print(f"Received start command with text: {message.text}") 
    if 'referral_' in message.text:
        referrer_tg_id = int(message.text.split('referral_')[1])
        print(f"Referral ID: {referrer_tg_id}")
        if not await check_connection_exists(message.from_user.id):
            await add_connection(message.from_user.id)

            await add_referral(message.from_user.id, referrer_tg_id)
            
            await message.answer("–í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ!")
    await send_welcome_message(message.chat.id)

@router.callback_query(lambda c: c.data == 'about_vpn')
async def handle_about_vpn(callback_query: CallbackQuery):
    await callback_query.message.delete()
    info_message = (
        "*–û VPN*\n\n"
        "<b>üöÄ –í—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã</b>\n"
        "–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ—Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏—è—Ö –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
        
        "<b>üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö</b>\n"
        "–î–ª—è –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤–µ–π—à–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É—é—Ç –≤–∞—à—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å.\n\n"
        
        "<b>üîë –í–∞—à –∫–ª—é—á ‚Äî –≤–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å!</b>\n"
        "–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Å–≤–æ—ë —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º –ª–∏—Ü–∞–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–∏—Å–∫–æ–≤.\n"
    )

    button_back = InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='back_to_menu')
    inline_keyboard_back = InlineKeyboardMarkup(inline_keyboard=[[button_back]])

    await callback_query.message.answer(
        info_message,
        parse_mode='HTML',
        reply_markup=inline_keyboard_back
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == 'back_to_menu')
async def handle_back_to_menu(callback_query: CallbackQuery):
    await callback_query.message.delete()
    await send_welcome_message(callback_query.from_user.id)
    await callback_query.answer()
