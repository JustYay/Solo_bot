from aiogram import Router, types
from aiogram.filters import Command
from filters.admin import IsAdminFilter

from database import add_balance_to_client, check_connection_exists

router = Router()


@router.message(Command("add_balance"), IsAdminFilter())
async def cmd_add_balance(message: types.Message):
    try:
        _, client_id, amount = message.text.split()
        amount = float(amount)

        if not await check_connection_exists(int(client_id)):
            await message.reply(f"‚ùå –ö–ª–∏–µ–Ω—Ç —Å ID {client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        await add_balance_to_client(int(client_id), amount)
        await message.reply(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞ {client_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount}"
        )
    except ValueError:
        await message.reply(
            "‚ùì –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–±–ª–æ–Ω:\n"
            "/add_balance <ID –∫–ª–∏–µ–Ω—Ç–∞> <—Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è>"
        )
    except Exception as e:
        await message.reply(f"üö® –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
