from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from database import create_coupon, delete_coupon_from_db, get_all_coupons
from filters.admin import IsAdminFilter
from logger import logger


class AdminCouponsState(StatesGroup):
    waiting_for_coupon_data = State()


router = Router()


@router.callback_query(F.data == "coupons_editor", IsAdminFilter())
async def show_coupon_management_menu(
    callback_query: types.CallbackQuery, state: FSMContext
):
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    finally:
        await state.clear()

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –∫—É–ø–æ–Ω", callback_data="create_coupon")
    )
    builder.row(InlineKeyboardButton(text="–ö—É–ø–æ–Ω—ã", callback_data="coupons"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin"))

    markup = builder.as_markup()
    await callback_query.message.answer(
        "üõ† –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞–º–∏:", reply_markup=markup
    )
    await callback_query.answer()


@router.callback_query(F.data == "coupons", IsAdminFilter())
async def show_coupon_list(callback_query: types.CallbackQuery):
    try:
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        coupons = await get_all_coupons()

        if not coupons:
            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coupons_editor")
            )
            markup = builder.as_markup()

            await callback_query.message.answer(
                "‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ø–æ–Ω–æ–≤.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                parse_mode="HTML",
                reply_markup=markup,
            )
            await callback_query.answer()
            return

        coupon_list = "üìú –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É–ø–æ–Ω–æ–≤:\n\n"
        builder = InlineKeyboardBuilder()

        for coupon in coupons:
            coupon_list += (
                f"<b>–ö–æ–¥:</b> {coupon['code']}\n"
                f"<b>–°—É–º–º–∞:</b> {coupon['amount']} —Ä—É–±–ª–µ–π\n"
                f"<b>–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b> {coupon['usage_limit']} —Ä–∞–∑\n"
                f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {coupon['usage_count']} —Ä–∞–∑\n\n"
            )

            builder.row(
                InlineKeyboardButton(
                    text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {coupon['code']}",
                    callback_data=f"delete_coupon_{coupon['code']}",
                )
            )

        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coupons_editor")
        )

        markup = builder.as_markup()
        await callback_query.message.answer(
            coupon_list, parse_mode="HTML", reply_markup=markup
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤: {e}")
        await callback_query.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É–ø–æ–Ω–æ–≤: {e}", parse_mode="HTML"
        )
    await callback_query.answer()


@router.callback_query(F.data.startswith("delete_coupon_"), IsAdminFilter())
async def handle_delete_coupon(callback_query: types.CallbackQuery):
    coupon_code = callback_query.data[len("delete_coupon_") :]

    try:
        result = await delete_coupon_from_db(coupon_code)

        if result:
            try:
                await callback_query.message.delete()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            await show_coupon_list(callback_query)
        else:
            await callback_query.message.answer(
                f"‚ùå –ö—É–ø–æ–Ω —Å –∫–æ–¥–æ–º <b>{coupon_code}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω.", parse_mode="HTML"
            )
            await show_coupon_list(callback_query)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
        await callback_query.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {e}", parse_mode="HTML"
        )
    await callback_query.answer()


@router.callback_query(F.data == "create_coupon", IsAdminFilter())
async def handle_create_coupon(callback_query: types.CallbackQuery, state: FSMContext):
    try:
        await callback_query.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coupons_editor"))
    markup = builder.as_markup()

    await callback_query.message.answer(
        "<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É–ø–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n\n"
        "<i>–∫–æ–¥</i> <i>—Å—É–º–º–∞</i> <i>–ª–∏–º–∏—Ç</i>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <b>'COUPON1 50 5'</b>\n\n",
        parse_mode="HTML",
        reply_markup=markup,
    )
    await state.set_state(AdminCouponsState.waiting_for_coupon_data)
    await callback_query.answer()


@router.message(AdminCouponsState.waiting_for_coupon_data, IsAdminFilter())
async def process_coupon_data(message: types.Message, state: FSMContext):
    text = message.text.strip()

    parts = text.split()

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coupons_editor"))
    markup = builder.as_markup()

    if len(parts) != 3:
        await message.answer(
            "<b>‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "<b>–∫–æ–¥</b> <b>—Å—É–º–º–∞</b> <b>–ª–∏–º–∏—Ç</b>\n"
            "–ü—Ä–∏–º–µ—Ä: <b>'COUPON1 50 5'</b>",
            parse_mode="HTML",
            reply_markup=markup,
        )
        return

    try:
        coupon_code = parts[0]
        coupon_amount = float(parts[1])
        usage_limit = int(parts[2])
    except ValueError:
        await message.answer(
            "<b>‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.</b>\n"
            "–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º, –∞ –ª–∏–º–∏—Ç ‚Äî —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.",
            parse_mode="HTML",
            reply_markup=markup,
        )
        return

    try:
        await create_coupon(coupon_code, coupon_amount, usage_limit)

        result_message = (
            f"‚úÖ –ö—É–ø–æ–Ω —Å –∫–æ–¥–æ–º <b>{coupon_code}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n"
            f"–°—É–º–º–∞: <b>{coupon_amount} —Ä—É–±–ª–µ–π</b>\n"
            f"–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: <b>{usage_limit} —Ä–∞–∑</b>."
        )

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="coupons_editor")
        )
        markup = builder.as_markup()

        try:
            await message.delete()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        await message.answer(result_message, parse_mode="HTML", reply_markup=markup)

        await state.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞: {e}")
        await message.answer(
            f"<b>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—É–ø–æ–Ω–∞:</b> {e}", parse_mode="HTML"
        )


@router.callback_query(F.data == "back_to_coupons_menu")
async def back_to_coupons_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É–ø–æ–Ω–∞–º–∏"""
    await state.clear()
    await show_coupon_management_menu(callback_query)
