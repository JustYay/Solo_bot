import subprocess
from datetime import datetime

import asyncpg
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
)

from backup import backup_database
from bot import bot
from config import ADMIN_ID, DATABASE_URL
from handlers.commands import send_message_to_all_clients
from middlewares.admin import admin_only

router = Router()


class UserEditorState(StatesGroup):
    waiting_for_tg_id = State()
    displaying_user_info = State()


@router.message(Command("admin"))
@admin_only()
async def handle_admin_command(message: types.Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_editor"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º",
                    callback_data="send_to_alls",
                )
            ],
            [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backups")],
            [
                InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot"
                )
            ],
        ]
    )
    await bot.send_message(
        message.chat.id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "user_stats")
@admin_only()
async def user_stats_menu(callback_query: CallbackQuery):
    conn = await asyncpg.connect(DATABASE_URL)
    try:
        total_users = await conn.fetchval("SELECT COUNT(*) FROM connections")
        total_keys = await conn.fetchval("SELECT COUNT(*) FROM keys")
        total_referrals = await conn.fetchval("SELECT COUNT(*) FROM referrals")

        active_keys = await conn.fetchval(
            "SELECT COUNT(*) FROM keys WHERE expiry_time > $1",
            int(datetime.utcnow().timestamp() * 1000),
        )
        expired_keys = total_keys - active_keys

        stats_message = (
            f"üîπ <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: <b>{total_keys}</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{total_referrals}</b>\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏: <b>{active_keys}</b>\n"
            f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏–µ –∫–ª—é—á–∏: <b>{expired_keys}</b>"
        )

        back_button = InlineKeyboardButton(
            text="–ù–∞–∑–∞–¥", callback_data="back_to_admin_menu"
        )
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])

        await callback_query.message.edit_text(
            stats_message, reply_markup=keyboard, parse_mode="HTML"
        )
    finally:
        await conn.close()

    await callback_query.answer()


@router.callback_query(lambda c: c.data == "send_to_alls")
@admin_only()
async def handle_send_to_all(callback_query: CallbackQuery, state: FSMContext):
    await send_message_to_all_clients(callback_query.message, state, from_panel=True)
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "backups")
@admin_only()
async def handle_backup(message: Message):
    await message.answer("–ó–∞–ø—É—Å–∫–∞—é –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await backup_database()
    await message.answer("–ë—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω—É.")


@router.callback_query(lambda c: c.data == "restart_bot")
@admin_only()
async def handle_restart(callback_query: CallbackQuery):
    if callback_query.from_user.id == ADMIN_ID:
        try:
            result = subprocess.run(
                ["sudo", "systemctl", "restart", "bot.service"],
                check=True,
                capture_output=True,
                text=True,
            )
            await callback_query.message.answer("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.")
        except subprocess.CalledProcessError as e:
            await callback_query.message.answer(
                f"–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ {e.stderr}"
            )
    else:
        await callback_query.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", show_alert=True
        )


@router.callback_query(lambda c: c.data == "user_editor")
@admin_only()
async def user_editor_menu(callback_query: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∫–ª—é—á–∞", callback_data="search_by_key_name"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü–æ–∏—Å–∫ –ø–æ tg_id", callback_data="search_by_tg_id"
                )
            ],
            [
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_admin_menu")
            ],  # Back button
        ]
    )
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞:", reply_markup=keyboard
    )


@router.callback_query(lambda c: c.data == "back_to_admin_menu")
@admin_only()
async def back_to_admin_menu(callback_query: CallbackQuery):
    try:
        await callback_query.message.delete()
    except Exception:
        pass

    tg_id = callback_query.from_user.id
    if tg_id == ADMIN_ID:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_editor"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º",
                        callback_data="send_to_alls",
                    )
                ],
                [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backups")],
                [
                    InlineKeyboardButton(
                        text="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot"
                    )
                ],
            ]
        )
        await bot.send_message(tg_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=keyboard)
    else:
        await bot.send_message(tg_id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")


async def handle_error(tg_id, callback_query, message):
    await bot.edit_message_text(
        message, chat_id=tg_id, message_id=callback_query.message.message_id
    )
